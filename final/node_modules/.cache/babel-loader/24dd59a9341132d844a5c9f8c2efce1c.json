{"ast":null,"code":"var _jsxFileName = \"/Users/nicolashodee/Desktop/LOCAL_WORKING_FOLDER/CODE/quiz/quiz-app/final/src/App.js\";\nimport React, { useState } from 'react';\nexport default function App() {\n  const questions = [{\n    questionText: 'Combien de litres d\\'eau as tu à la maison batard ?',\n    answerOptions: [{\n      answerText: 'un litre',\n      answerScore: 1\n    }, {\n      answerText: 'six litres',\n      answerScore: 6\n    }, {\n      answerText: 'dix litres',\n      answerScore: 10\n    }, {\n      answerText: 'ving litres',\n      answerScore: 20\n    }]\n  }, {\n    questionText: 'Et combien de panneaux solaires enculé ?',\n    answerOptions: [{\n      answerText: '1',\n      answerScore: 1\n    }, {\n      answerText: '2',\n      answerScore: 2\n    }, {\n      answerText: '3',\n      answerScore: 3\n    }, {\n      answerText: '4',\n      answerScore: 4\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [ecoScore, setEcoScore] = useState(0);\n  const starsArray = [];\n\n  const handleAnswerOptionClick = answerScore => {\n    //ajoute le nombre d'eco points au total\n    setEcoScore(ecoScore + answerScore); //delire avec les emoticones \n\n    for (let i = 0; i < answerScore; i++) {\n      starsArray.push('2B50');\n      console.log(starsArray);\n    } //passe à la question suivante et verifie si on est à la derniere question \n\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const emojis = starsArray.map(([start, end]) => Array.from({\n    length: end - start\n  }, (x, i) => i + start)).flat();\n  return (\n    /*#__PURE__*/\n    // ECRAN d'AFFICHAGE \n    React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 4\n      }\n    }, \"Votre score actuel \", ecoScore), showScore ?\n    /*#__PURE__*/\n    //SI showScore is TRUE, on affiche le score final \n    React.createElement(\"div\", {\n      className: \"score-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, \"Vous avez marqu\\xE9 \", ecoScore, \" eco points \\uD83D\\uDC4D\\uD83C\\uDFFB, f\\xE9licitations !\", palmArray.map(emoji => {\n      return '<span class=\"emoji\">' + String.fromCodePoint(emoji) + '</span>';\n    })) :\n    /*#__PURE__*/\n    //SINON, on affiche les questions\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 8\n      }\n    }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 6\n      }\n    }, questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleAnswerOptionClick(answerOption.answerScore),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 8\n      }\n    }, answerOption.answerText)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, \"Ajouter une question ?\")))\n  );\n}","map":{"version":3,"sources":["/Users/nicolashodee/Desktop/LOCAL_WORKING_FOLDER/CODE/quiz/quiz-app/final/src/App.js"],"names":["React","useState","App","questions","questionText","answerOptions","answerText","answerScore","currentQuestion","setCurrentQuestion","showScore","setShowScore","ecoScore","setEcoScore","starsArray","handleAnswerOptionClick","i","push","console","log","nextQuestion","length","emojis","map","start","end","Array","from","x","flat","palmArray","emoji","String","fromCodePoint","answerOption"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nexport default function App() {\n\tconst questions = [\n\t\t{\n\t\t\tquestionText: 'Combien de litres d\\'eau as tu à la maison batard ?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'un litre', answerScore: 1 },\n\t\t\t\t{ answerText: 'six litres', answerScore: 6 },\n\t\t\t\t{ answerText: 'dix litres', answerScore: 10 },\n\t\t\t\t{ answerText: 'ving litres', answerScore: 20 },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Et combien de panneaux solaires enculé ?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: '1', answerScore: 1 },\n\t\t\t\t{ answerText: '2', answerScore: 2 },\n\t\t\t\t{ answerText: '3', answerScore: 3 },\n\t\t\t\t{ answerText: '4', answerScore: 4 },\n\t\t\t],\n\t\t},\n\t];\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [ecoScore, setEcoScore] = useState(0);\n\tconst starsArray = []; \n\n\tconst handleAnswerOptionClick = (answerScore) => {\n\t\t//ajoute le nombre d'eco points au total\n\t\tsetEcoScore(ecoScore + answerScore);\n\n\t\t//delire avec les emoticones \n\t\tfor (let i = 0; i < answerScore; i++) {\n\t\t\tstarsArray.push('2B50');\n\t\t\tconsole.log(starsArray)\n\t\t} \n\n\t\t//passe à la question suivante et verifie si on est à la derniere question \n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t};\n\n\tconst emojis = starsArray\n\t\t\t.map(([start, end]) =>\n\t\t\t\tArray.from({ length: end - start }, (x, i) => i + start)\n\t\t\t)\n\t\t\t.flat()\n\treturn (\n\n\t\t// ECRAN d'AFFICHAGE \n\t\t<div className='app'>\n\t\t\t<div>Votre score actuel {ecoScore}</div>\t\t\n\t\t\t\n\t\t\t{showScore ? (\n\t\t\t\t//SI showScore is TRUE, on affiche le score final \n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tVous avez marqué {ecoScore} eco points 👍🏻, félicitations ! \n\t\t\t\t\t{palmArray.map((emoji) => {\n    \t\t\t\treturn '<span class=\"emoji\">' + String.fromCodePoint(emoji) + '</span>'\n  })}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t//SINON, on affiche les questions\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button onClick={() => handleAnswerOptionClick(answerOption.answerScore)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<div className='add-question'>\n\t\t\t\t<p>Ajouter une question ?</p>\n\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}